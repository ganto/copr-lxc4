diff --git a/cmd/incus/console.go b/cmd/incus/console.go
index ce195d441..312f46202 100644
--- a/cmd/incus/console.go
+++ b/cmd/incus/console.go
@@ -229,7 +229,7 @@ func (c *cmdConsole) text(d incus.InstanceServer, name string) error {
 		return err
 	}
 
-	fmt.Printf(i18n.G("To detach from the console, press: <ctrl>+a q") + "\n\r")
+	fmt.Printf("%s", i18n.G("To detach from the console, press: <ctrl>+a q") + "\n\r")
 
 	// Wait for the operation to complete
 	err = op.Wait()
diff --git a/cmd/incus/create.go b/cmd/incus/create.go
index 530812419..13a5aa832 100644
--- a/cmd/incus/create.go
+++ b/cmd/incus/create.go
@@ -173,13 +173,13 @@ func (c *cmdCreate) create(conf *config.Config, args []string, launch bool) (inc
 	if !c.global.flagQuiet {
 		if d.HasExtension("instance_create_start") && launch {
 			if name == "" {
-				fmt.Printf(i18n.G("Launching the instance") + "\n")
+				fmt.Printf("%s", i18n.G("Launching the instance") + "\n")
 			} else {
 				fmt.Printf(i18n.G("Launching %s")+"\n", name)
 			}
 		} else {
 			if name == "" {
-				fmt.Printf(i18n.G("Creating the instance") + "\n")
+				fmt.Printf("%s", i18n.G("Creating the instance") + "\n")
 			} else {
 				fmt.Printf(i18n.G("Creating %s")+"\n", name)
 			}
@@ -476,7 +476,7 @@ func (c *cmdCreate) checkNetwork(d incus.InstanceServer, name string) {
 		}
 	}
 
-	fmt.Fprintf(os.Stderr, "\n"+i18n.G("The instance you are starting doesn't have any network attached to it.")+"\n")
-	fmt.Fprintf(os.Stderr, "  "+i18n.G("To create a new network, use: incus network create")+"\n")
-	fmt.Fprintf(os.Stderr, "  "+i18n.G("To attach a network to an instance, use: incus network attach")+"\n\n")
+	fmt.Fprint(os.Stderr, "\n"+i18n.G("The instance you are starting doesn't have any network attached to it.")+"\n")
+	fmt.Fprint(os.Stderr, "  "+i18n.G("To create a new network, use: incus network create")+"\n")
+	fmt.Fprint(os.Stderr, "  "+i18n.G("To attach a network to an instance, use: incus network attach")+"\n\n")
 }
diff --git a/cmd/incus/image.go b/cmd/incus/image.go
index 4a6f626e3..b3c4e23fe 100644
--- a/cmd/incus/image.go
+++ b/cmd/incus/image.go
@@ -1013,7 +1013,7 @@ func (c *cmdImageInfo) Run(cmd *cobra.Command, args []string) error {
 	fmt.Printf(i18n.G("Architecture: %s")+"\n", info.Architecture)
 	fmt.Printf(i18n.G("Type: %s")+"\n", imgType)
 	fmt.Printf(i18n.G("Public: %s")+"\n", public)
-	fmt.Printf(i18n.G("Timestamps:") + "\n")
+	fmt.Print(i18n.G("Timestamps:") + "\n")
 
 	if !info.CreatedAt.IsZero() {
 		fmt.Printf("    "+i18n.G("Created: %s")+"\n", info.CreatedAt.Local().Format(dateLayout))
@@ -1024,13 +1024,13 @@ func (c *cmdImageInfo) Run(cmd *cobra.Command, args []string) error {
 	if !info.ExpiresAt.IsZero() {
 		fmt.Printf("    "+i18n.G("Expires: %s")+"\n", info.ExpiresAt.Local().Format(dateLayout))
 	} else {
-		fmt.Printf("    " + i18n.G("Expires: never") + "\n")
+		fmt.Print("    " + i18n.G("Expires: never") + "\n")
 	}
 
 	if !info.LastUsedAt.IsZero() {
 		fmt.Printf("    "+i18n.G("Last used: %s")+"\n", info.LastUsedAt.Local().Format(dateLayout))
 	} else {
-		fmt.Printf("    " + i18n.G("Last used: never") + "\n")
+		fmt.Print("    " + i18n.G("Last used: never") + "\n")
 	}
 
 	fmt.Println(i18n.G("Properties:"))
@@ -1058,7 +1058,7 @@ func (c *cmdImageInfo) Run(cmd *cobra.Command, args []string) error {
 	}
 
 	if len(info.Profiles) == 0 {
-		fmt.Printf(i18n.G("Profiles: ") + "[]\n")
+		fmt.Print(i18n.G("Profiles: ") + "[]\n")
 	} else {
 		fmt.Println(i18n.G("Profiles:"))
 		for _, name := range info.Profiles {
diff --git a/cmd/incus/info.go b/cmd/incus/info.go
index 161ea807d..ac2efcf87 100644
--- a/cmd/incus/info.go
+++ b/cmd/incus/info.go
@@ -136,7 +136,7 @@ func (c *cmdInfo) renderGPU(gpu api.ResourcesGPUCard, prefix string, initial boo
 	}
 
 	if gpu.DRM != nil {
-		fmt.Printf(prefix + i18n.G("DRM:") + "\n")
+		fmt.Print(prefix + i18n.G("DRM:") + "\n")
 		fmt.Printf(prefix+"  "+i18n.G("ID: %d")+"\n", gpu.DRM.ID)
 
 		if gpu.DRM.CardName != "" {
@@ -153,7 +153,7 @@ func (c *cmdInfo) renderGPU(gpu api.ResourcesGPUCard, prefix string, initial boo
 	}
 
 	if gpu.Nvidia != nil {
-		fmt.Printf(prefix + i18n.G("NVIDIA information:") + "\n")
+		fmt.Print(prefix + i18n.G("NVIDIA information:") + "\n")
 		fmt.Printf(prefix+"  "+i18n.G("Architecture: %v")+"\n", gpu.Nvidia.Architecture)
 		fmt.Printf(prefix+"  "+i18n.G("Brand: %v")+"\n", gpu.Nvidia.Brand)
 		fmt.Printf(prefix+"  "+i18n.G("Model: %v")+"\n", gpu.Nvidia.Model)
@@ -163,7 +163,7 @@ func (c *cmdInfo) renderGPU(gpu api.ResourcesGPUCard, prefix string, initial boo
 	}
 
 	if gpu.SRIOV != nil {
-		fmt.Printf(prefix + i18n.G("SR-IOV information:") + "\n")
+		fmt.Print(prefix + i18n.G("SR-IOV information:") + "\n")
 		fmt.Printf(prefix+"  "+i18n.G("Current number of VFs: %d")+"\n", gpu.SRIOV.CurrentVFs)
 		fmt.Printf(prefix+"  "+i18n.G("Maximum number of VFs: %d")+"\n", gpu.SRIOV.MaximumVFs)
 		if len(gpu.SRIOV.VFs) > 0 {
@@ -176,7 +176,7 @@ func (c *cmdInfo) renderGPU(gpu api.ResourcesGPUCard, prefix string, initial boo
 	}
 
 	if gpu.Mdev != nil {
-		fmt.Printf(prefix + i18n.G("Mdev profiles:") + "\n")
+		fmt.Print(prefix + i18n.G("Mdev profiles:") + "\n")
 
 		keys := make([]string, 0, len(gpu.Mdev))
 		for k := range gpu.Mdev {
@@ -222,7 +222,7 @@ func (c *cmdInfo) renderNIC(nic api.ResourcesNetworkCard, prefix string, initial
 	}
 
 	if len(nic.Ports) > 0 {
-		fmt.Printf(prefix + i18n.G("Ports:") + "\n")
+		fmt.Print(prefix + i18n.G("Ports:") + "\n")
 		for _, port := range nic.Ports {
 			fmt.Printf(prefix+"  "+i18n.G("- Port %d (%s)")+"\n", port.Port, port.Protocol)
 			fmt.Printf(prefix+"    "+i18n.G("ID: %s")+"\n", port.ID)
@@ -254,7 +254,7 @@ func (c *cmdInfo) renderNIC(nic api.ResourcesNetworkCard, prefix string, initial
 			}
 
 			if port.Infiniband != nil {
-				fmt.Printf(prefix + "    " + i18n.G("Infiniband:") + "\n")
+				fmt.Print(prefix + "    " + i18n.G("Infiniband:") + "\n")
 
 				if port.Infiniband.IsSMName != "" {
 					fmt.Printf(prefix+"      "+i18n.G("IsSM: %s (%s)")+"\n", port.Infiniband.IsSMName, port.Infiniband.IsSMDevice)
@@ -272,7 +272,7 @@ func (c *cmdInfo) renderNIC(nic api.ResourcesNetworkCard, prefix string, initial
 	}
 
 	if nic.SRIOV != nil {
-		fmt.Printf(prefix + i18n.G("SR-IOV information:") + "\n")
+		fmt.Print(prefix + i18n.G("SR-IOV information:") + "\n")
 		fmt.Printf(prefix+"  "+i18n.G("Current number of VFs: %d")+"\n", nic.SRIOV.CurrentVFs)
 		fmt.Printf(prefix+"  "+i18n.G("Maximum number of VFs: %d")+"\n", nic.SRIOV.MaximumVFs)
 		if len(nic.SRIOV.VFs) > 0 {
@@ -313,7 +313,7 @@ func (c *cmdInfo) renderDisk(disk api.ResourcesStorageDisk, prefix string, initi
 	fmt.Printf(prefix+i18n.G("Removable: %v")+"\n", disk.Removable)
 
 	if len(disk.Partitions) != 0 {
-		fmt.Printf(prefix + i18n.G("Partitions:") + "\n")
+		fmt.Print(prefix + i18n.G("Partitions:") + "\n")
 		for _, partition := range disk.Partitions {
 			fmt.Printf(prefix+"  "+i18n.G("- Partition %d")+"\n", partition.Partition)
 			fmt.Printf(prefix+"    "+i18n.G("ID: %s")+"\n", partition.ID)
@@ -334,17 +334,17 @@ func (c *cmdInfo) renderCPU(cpu api.ResourcesCPUSocket, prefix string) {
 	}
 
 	if cpu.Cache != nil {
-		fmt.Printf(prefix + i18n.G("Caches:") + "\n")
+		fmt.Print(prefix + i18n.G("Caches:") + "\n")
 		for _, cache := range cpu.Cache {
 			fmt.Printf(prefix+"  "+i18n.G("- Level %d (type: %s): %s")+"\n", cache.Level, cache.Type, units.GetByteSizeStringIEC(int64(cache.Size), 0))
 		}
 	}
 
-	fmt.Printf(prefix + i18n.G("Cores:") + "\n")
+	fmt.Print(prefix + i18n.G("Cores:") + "\n")
 	for _, core := range cpu.Cores {
 		fmt.Printf(prefix+"  - "+i18n.G("Core %d")+"\n", core.Core)
 		fmt.Printf(prefix+"    "+i18n.G("Frequency: %vMhz")+"\n", core.Frequency)
-		fmt.Printf(prefix + "    " + i18n.G("Threads:") + "\n")
+		fmt.Print(prefix + "    " + i18n.G("Threads:") + "\n")
 		for _, thread := range core.Threads {
 			fmt.Printf(prefix+"      - "+i18n.G("%d (id: %d, online: %v, NUMA node: %v)")+"\n", thread.Thread, thread.ID, thread.Online, thread.NUMANode)
 		}
@@ -403,7 +403,7 @@ func (c *cmdInfo) remoteInfo(d incus.InstanceServer) error {
 		}
 
 		// System
-		fmt.Printf(i18n.G("System:") + "\n")
+		fmt.Print(i18n.G("System:") + "\n")
 		if resources.System.UUID != "" {
 			fmt.Printf("  "+i18n.G("UUID: %v")+"\n", resources.System.UUID)
 		}
@@ -438,7 +438,7 @@ func (c *cmdInfo) remoteInfo(d incus.InstanceServer) error {
 
 		// System: Chassis
 		if resources.System.Chassis != nil {
-			fmt.Printf(i18n.G("  Chassis:") + "\n")
+			fmt.Print(i18n.G("  Chassis:") + "\n")
 			if resources.System.Chassis.Vendor != "" {
 				fmt.Printf("      "+i18n.G("Vendor: %s")+"\n", resources.System.Chassis.Vendor)
 			}
@@ -458,7 +458,7 @@ func (c *cmdInfo) remoteInfo(d incus.InstanceServer) error {
 
 		// System: Motherboard
 		if resources.System.Motherboard != nil {
-			fmt.Printf(i18n.G("  Motherboard:") + "\n")
+			fmt.Print(i18n.G("  Motherboard:") + "\n")
 			if resources.System.Motherboard.Vendor != "" {
 				fmt.Printf("      "+i18n.G("Vendor: %s")+"\n", resources.System.Motherboard.Vendor)
 			}
@@ -478,7 +478,7 @@ func (c *cmdInfo) remoteInfo(d incus.InstanceServer) error {
 
 		// System: Firmware
 		if resources.System.Firmware != nil {
-			fmt.Printf(i18n.G("  Firmware:") + "\n")
+			fmt.Print(i18n.G("  Firmware:") + "\n")
 			if resources.System.Firmware.Vendor != "" {
 				fmt.Printf("      "+i18n.G("Vendor: %s")+"\n", resources.System.Firmware.Vendor)
 			}
@@ -493,7 +493,7 @@ func (c *cmdInfo) remoteInfo(d incus.InstanceServer) error {
 		}
 
 		// Load
-		fmt.Printf("\n" + i18n.G("Load:") + "\n")
+		fmt.Print("\n" + i18n.G("Load:") + "\n")
 		if resources.Load.Processes > 0 {
 			fmt.Printf("  "+i18n.G("Processes: %d")+"\n", resources.Load.Processes)
 			fmt.Printf("  "+i18n.G("Average: %.2f %.2f %.2f")+"\n", resources.Load.Average1Min, resources.Load.Average5Min, resources.Load.Average10Min)
@@ -501,11 +501,11 @@ func (c *cmdInfo) remoteInfo(d incus.InstanceServer) error {
 
 		// CPU
 		if len(resources.CPU.Sockets) == 1 {
-			fmt.Printf("\n" + i18n.G("CPU:") + "\n")
+			fmt.Print("\n" + i18n.G("CPU:") + "\n")
 			fmt.Printf("  "+i18n.G("Architecture: %s")+"\n", resources.CPU.Architecture)
 			c.renderCPU(resources.CPU.Sockets[0], "  ")
 		} else if len(resources.CPU.Sockets) > 1 {
-			fmt.Printf(i18n.G("CPUs:") + "\n")
+			fmt.Print(i18n.G("CPUs:") + "\n")
 			fmt.Printf("  "+i18n.G("Architecture: %s")+"\n", resources.CPU.Architecture)
 			for _, cpu := range resources.CPU.Sockets {
 				fmt.Printf("  "+i18n.G("Socket %d:")+"\n", cpu.Socket)
@@ -514,20 +514,20 @@ func (c *cmdInfo) remoteInfo(d incus.InstanceServer) error {
 		}
 
 		// Memory
-		fmt.Printf("\n" + i18n.G("Memory:") + "\n")
+		fmt.Print("\n" + i18n.G("Memory:") + "\n")
 		if resources.Memory.HugepagesTotal > 0 {
-			fmt.Printf("  " + i18n.G("Hugepages:"+"\n"))
+			fmt.Print("  " + i18n.G("Hugepages:"+"\n"))
 			fmt.Printf("    "+i18n.G("Free: %v")+"\n", units.GetByteSizeStringIEC(int64(resources.Memory.HugepagesTotal-resources.Memory.HugepagesUsed), 2))
 			fmt.Printf("    "+i18n.G("Used: %v")+"\n", units.GetByteSizeStringIEC(int64(resources.Memory.HugepagesUsed), 2))
 			fmt.Printf("    "+i18n.G("Total: %v")+"\n", units.GetByteSizeStringIEC(int64(resources.Memory.HugepagesTotal), 2))
 		}
 
 		if len(resources.Memory.Nodes) > 1 {
-			fmt.Printf("  " + i18n.G("NUMA nodes:"+"\n"))
+			fmt.Print("  " + i18n.G("NUMA nodes:"+"\n"))
 			for _, node := range resources.Memory.Nodes {
 				fmt.Printf("    "+i18n.G("Node %d:"+"\n"), node.NUMANode)
 				if node.HugepagesTotal > 0 {
-					fmt.Printf("      " + i18n.G("Hugepages:"+"\n"))
+					fmt.Print("      " + i18n.G("Hugepages:"+"\n"))
 					fmt.Printf("        "+i18n.G("Free: %v")+"\n", units.GetByteSizeStringIEC(int64(node.HugepagesTotal-node.HugepagesUsed), 2))
 					fmt.Printf("        "+i18n.G("Used: %v")+"\n", units.GetByteSizeStringIEC(int64(node.HugepagesUsed), 2))
 					fmt.Printf("        "+i18n.G("Total: %v")+"\n", units.GetByteSizeStringIEC(int64(node.HugepagesTotal), 2))
@@ -545,10 +545,10 @@ func (c *cmdInfo) remoteInfo(d incus.InstanceServer) error {
 
 		// GPUs
 		if len(resources.GPU.Cards) == 1 {
-			fmt.Printf("\n" + i18n.G("GPU:") + "\n")
+			fmt.Print("\n" + i18n.G("GPU:") + "\n")
 			c.renderGPU(resources.GPU.Cards[0], "  ", true)
 		} else if len(resources.GPU.Cards) > 1 {
-			fmt.Printf("\n" + i18n.G("GPUs:") + "\n")
+			fmt.Print("\n" + i18n.G("GPUs:") + "\n")
 			for id, gpu := range resources.GPU.Cards {
 				fmt.Printf("  "+i18n.G("Card %d:")+"\n", id)
 				c.renderGPU(gpu, "    ", true)
@@ -557,10 +557,10 @@ func (c *cmdInfo) remoteInfo(d incus.InstanceServer) error {
 
 		// Network interfaces
 		if len(resources.Network.Cards) == 1 {
-			fmt.Printf("\n" + i18n.G("NIC:") + "\n")
+			fmt.Print("\n" + i18n.G("NIC:") + "\n")
 			c.renderNIC(resources.Network.Cards[0], "  ", true)
 		} else if len(resources.Network.Cards) > 1 {
-			fmt.Printf("\n" + i18n.G("NICs:") + "\n")
+			fmt.Print("\n" + i18n.G("NICs:") + "\n")
 			for id, nic := range resources.Network.Cards {
 				fmt.Printf("  "+i18n.G("Card %d:")+"\n", id)
 				c.renderNIC(nic, "    ", true)
@@ -569,10 +569,10 @@ func (c *cmdInfo) remoteInfo(d incus.InstanceServer) error {
 
 		// Storage
 		if len(resources.Storage.Disks) == 1 {
-			fmt.Printf("\n" + i18n.G("Disk:") + "\n")
+			fmt.Print("\n" + i18n.G("Disk:") + "\n")
 			c.renderDisk(resources.Storage.Disks[0], "  ", true)
 		} else if len(resources.Storage.Disks) > 1 {
-			fmt.Printf("\n" + i18n.G("Disks:") + "\n")
+			fmt.Print("\n" + i18n.G("Disks:") + "\n")
 			for id, nic := range resources.Storage.Disks {
 				fmt.Printf("  "+i18n.G("Disk %d:")+"\n", id)
 				c.renderDisk(nic, "    ", true)
@@ -581,10 +581,10 @@ func (c *cmdInfo) remoteInfo(d incus.InstanceServer) error {
 
 		// USB
 		if len(resources.USB.Devices) == 1 {
-			fmt.Printf("\n" + i18n.G("USB device:") + "\n")
+			fmt.Print("\n" + i18n.G("USB device:") + "\n")
 			c.renderUSB(resources.USB.Devices[0], "  ")
 		} else if len(resources.USB.Devices) > 1 {
-			fmt.Printf("\n" + i18n.G("USB devices:") + "\n")
+			fmt.Print("\n" + i18n.G("USB devices:") + "\n")
 			for id, usb := range resources.USB.Devices {
 				fmt.Printf("  "+i18n.G("Device %d:")+"\n", id)
 				c.renderUSB(usb, "    ")
@@ -593,10 +593,10 @@ func (c *cmdInfo) remoteInfo(d incus.InstanceServer) error {
 
 		// PCI
 		if len(resources.PCI.Devices) == 1 {
-			fmt.Printf("\n" + i18n.G("PCI device:") + "\n")
+			fmt.Print("\n" + i18n.G("PCI device:") + "\n")
 			c.renderPCI(resources.PCI.Devices[0], "  ")
 		} else if len(resources.PCI.Devices) > 1 {
-			fmt.Printf("\n" + i18n.G("PCI devices:") + "\n")
+			fmt.Print("\n" + i18n.G("PCI devices:") + "\n")
 			for id, pci := range resources.PCI.Devices {
 				fmt.Printf("  "+i18n.G("Device %d:")+"\n", id)
 				c.renderPCI(pci, "    ")
diff --git a/cmd/incus/main.go b/cmd/incus/main.go
index 676a916a9..5809db73e 100644
--- a/cmd/incus/main.go
+++ b/cmd/incus/main.go
@@ -342,7 +342,7 @@ func main() {
 	if err != nil {
 		// Handle non-Linux systems
 		if err == config.ErrNotLinux {
-			fmt.Fprintf(os.Stderr, i18n.G(`This client hasn't been configured to use a remote server yet.
+			fmt.Fprint(os.Stderr, i18n.G(`This client hasn't been configured to use a remote server yet.
 As your platform can't run native Linux instances, you must connect to a remote server.
 
 If you already added a remote server, make it the default with "incus remote switch NAME".`)+"\n")
@@ -463,7 +463,7 @@ func (c *cmdGlobal) PreRun(cmd *cobra.Command, _ []string) error {
 
 			flush := false
 			if runInit && (cmd.Name() != "init" || cmd.Parent() == nil || cmd.Parent().Name() != "admin") {
-				fmt.Fprintf(os.Stderr, i18n.G("If this is your first time running Incus on this machine, you should also run: incus admin init")+"\n")
+				fmt.Fprint(os.Stderr, i18n.G("If this is your first time running Incus on this machine, you should also run: incus admin init")+"\n")
 				flush = true
 			}
 
diff --git a/cmd/incus/query.go b/cmd/incus/query.go
index 82f4b2842..f012fcea6 100644
--- a/cmd/incus/query.go
+++ b/cmd/incus/query.go
@@ -176,7 +176,7 @@ func (c *cmdQuery) Run(cmd *cobra.Command, args []string) error {
 		op := api.Operation{}
 		err = json.Unmarshal(resp.Metadata, &op)
 		if err == nil && op.Err != "" {
-			return fmt.Errorf(op.Err)
+			return fmt.Errorf("%s", op.Err)
 		}
 	}
 
diff --git a/cmd/incus/remote.go b/cmd/incus/remote.go
index 0a4c35970..da221558f 100644
--- a/cmd/incus/remote.go
+++ b/cmd/incus/remote.go
@@ -175,7 +175,7 @@ func (c *cmdRemoteAdd) runToken(server string, token string, rawToken *api.Certi
 	conf := c.global.conf
 
 	if !conf.HasClientCertificate() {
-		fmt.Fprintf(os.Stderr, i18n.G("Generating a client certificate. This may take a minute...")+"\n")
+		fmt.Fprint(os.Stderr, i18n.G("Generating a client certificate. This may take a minute...")+"\n")
 		err := conf.GenerateClientCertificate()
 		if err != nil {
 			return err
@@ -198,7 +198,7 @@ func (c *cmdRemoteAdd) runToken(server string, token string, rawToken *api.Certi
 	}
 
 	fmt.Println(i18n.G("All server addresses are unavailable"))
-	fmt.Printf(i18n.G("Please provide an alternate server address (empty to abort):") + " ")
+	fmt.Print(i18n.G("Please provide an alternate server address (empty to abort):") + " ")
 
 	buf := bufio.NewReader(os.Stdin)
 	line, _, err := buf.ReadLine()
@@ -410,7 +410,7 @@ func (c *cmdRemoteAdd) Run(cmd *cobra.Command, args []string) error {
 	// adding the remote server.
 	if rScheme != "unix" && !c.flagPublic && (c.flagAuthType == api.AuthenticationMethodTLS || c.flagAuthType == "") {
 		if !conf.HasClientCertificate() {
-			fmt.Fprintf(os.Stderr, i18n.G("Generating a client certificate. This may take a minute...")+"\n")
+			fmt.Fprint(os.Stderr, i18n.G("Generating a client certificate. This may take a minute...")+"\n")
 			err = conf.GenerateClientCertificate()
 			if err != nil {
 				return err
@@ -465,7 +465,7 @@ func (c *cmdRemoteAdd) Run(cmd *cobra.Command, args []string) error {
 			digest := localtls.CertFingerprint(certificate)
 
 			fmt.Printf(i18n.G("Certificate fingerprint: %s")+"\n", digest)
-			fmt.Printf(i18n.G("ok (y/n/[fingerprint])?") + " ")
+			fmt.Print(i18n.G("ok (y/n/[fingerprint])?") + " ")
 			buf := bufio.NewReader(os.Stdin)
 			line, _, err := buf.ReadLine()
 			if err != nil {
@@ -661,7 +661,7 @@ func (c *cmdRemoteGenerateCertificate) Run(cmd *cobra.Command, args []string) er
 
 	// Generate the certificate.
 	if !c.global.flagQuiet {
-		fmt.Fprintf(os.Stderr, i18n.G("Generating a client certificate. This may take a minute...")+"\n")
+		fmt.Fprint(os.Stderr, i18n.G("Generating a client certificate. This may take a minute...")+"\n")
 	}
 
 	err = conf.GenerateClientCertificate()
diff --git a/cmd/incusd/dev_incus.go b/cmd/incusd/dev_incus.go
index 893bdc725..57f125a7f 100644
--- a/cmd/incusd/dev_incus.go
+++ b/cmd/incusd/dev_incus.go
@@ -216,7 +216,7 @@ var devIncusAPIHandler = devIncusHandler{"/1.0", func(d *Daemon, c instance.Inst
 
 		err := json.NewDecoder(r.Body).Decode(&req)
 		if err != nil {
-			return response.DevIncusErrorResponse(api.StatusErrorf(http.StatusBadRequest, err.Error()), c.Type() == instancetype.VM)
+			return response.DevIncusErrorResponse(api.StatusErrorf(http.StatusBadRequest, "%v", err.Error()), c.Type() == instancetype.VM)
 		}
 
 		state := api.StatusCodeFromString(req.State)
@@ -227,7 +227,7 @@ var devIncusAPIHandler = devIncusHandler{"/1.0", func(d *Daemon, c instance.Inst
 
 		err = c.VolatileSet(map[string]string{"volatile.last_state.ready": strconv.FormatBool(state == api.Ready)})
 		if err != nil {
-			return response.DevIncusErrorResponse(api.StatusErrorf(http.StatusInternalServerError, err.Error()), c.Type() == instancetype.VM)
+			return response.DevIncusErrorResponse(api.StatusErrorf(http.StatusInternalServerError, "%v", err.Error()), c.Type() == instancetype.VM)
 		}
 
 		if state == api.Ready {
@@ -237,7 +237,7 @@ var devIncusAPIHandler = devIncusHandler{"/1.0", func(d *Daemon, c instance.Inst
 		return response.DevIncusResponse(http.StatusOK, "", "raw", c.Type() == instancetype.VM)
 	}
 
-	return response.DevIncusErrorResponse(api.StatusErrorf(http.StatusMethodNotAllowed, fmt.Sprintf("method %q not allowed", r.Method)), c.Type() == instancetype.VM)
+	return response.DevIncusErrorResponse(api.StatusErrorf(http.StatusMethodNotAllowed, "%s", fmt.Sprintf("method %q not allowed", r.Method)), c.Type() == instancetype.VM)
 }}
 
 var devIncusDevicesGet = devIncusHandler{"/1.0/devices", func(d *Daemon, c instance.Instance, w http.ResponseWriter, r *http.Request) response.Response {
diff --git a/cmd/incusd/instance_sftp.go b/cmd/incusd/instance_sftp.go
index f3462dedb..047cfdd4b 100644
--- a/cmd/incusd/instance_sftp.go
+++ b/cmd/incusd/instance_sftp.go
@@ -134,7 +134,7 @@ func (r *sftpServeResponse) Render(w http.ResponseWriter) error {
 
 	err = response.Upgrade(remoteConn, "sftp")
 	if err != nil {
-		return api.StatusErrorf(http.StatusInternalServerError, err.Error())
+		return api.StatusErrorf(http.StatusInternalServerError, "%v", err.Error())
 	}
 
 	ctx, cancel := context.WithCancel(r.req.Context())
diff --git a/cmd/incusd/main_migratedumpsuccess.go b/cmd/incusd/main_migratedumpsuccess.go
index d850cbd92..ed4b5135a 100644
--- a/cmd/incusd/main_migratedumpsuccess.go
+++ b/cmd/incusd/main_migratedumpsuccess.go
@@ -79,5 +79,5 @@ func (c *cmdMigratedumpsuccess) Run(cmd *cobra.Command, args []string) error {
 		return nil
 	}
 
-	return fmt.Errorf(op.Err)
+	return fmt.Errorf("%s", op.Err)
 }
diff --git a/cmd/incusd/migrate_storage_volumes.go b/cmd/incusd/migrate_storage_volumes.go
index 06ed9824a..96eaf4e5e 100644
--- a/cmd/incusd/migrate_storage_volumes.go
+++ b/cmd/incusd/migrate_storage_volumes.go
@@ -241,7 +241,7 @@ func (s *migrationSourceWs) DoStorage(state *state.State, projectName string, po
 
 	if !msg.GetSuccess() {
 		logger.Errorf("Failed to send storage volume")
-		return fmt.Errorf(msg.GetMessage())
+		return fmt.Errorf("%s", msg.GetMessage())
 	}
 
 	logger.Debugf("Migration source finished transferring storage volume")
@@ -524,7 +524,7 @@ func (c *migrationSink) DoStorage(state *state.State, projectName string, poolNa
 			if !msg.GetSuccess() {
 				c.disconnect()
 
-				return fmt.Errorf(msg.GetMessage())
+				return fmt.Errorf("%s", msg.GetMessage())
 			}
 
 			// The source can only tell us it failed (e.g. if
diff --git a/internal/cmd/cancel.go b/internal/cmd/cancel.go
index 190bd6edf..b84703cd4 100644
--- a/internal/cmd/cancel.go
+++ b/internal/cmd/cancel.go
@@ -56,13 +56,13 @@ func CancelableWait(rawOp any, progress *ProgressRenderer) error {
 			}
 
 			if err == nil {
-				return fmt.Errorf(i18n.G("Remote operation canceled by user"))
+				return fmt.Errorf("%s", i18n.G("Remote operation canceled by user"))
 			}
 
 			count++
 
 			if count == 3 {
-				return fmt.Errorf(i18n.G("User signaled us three times, exiting. The remote operation will keep running"))
+				return fmt.Errorf("%s", i18n.G("User signaled us three times, exiting. The remote operation will keep running"))
 			}
 
 			if progress != nil {
diff --git a/internal/server/cluster/heartbeat.go b/internal/server/cluster/heartbeat.go
index db606da95..0a518db46 100644
--- a/internal/server/cluster/heartbeat.go
+++ b/internal/server/cluster/heartbeat.go
@@ -563,7 +563,7 @@ func HeartbeatNode(taskCtx context.Context, address string, networkCert *localtl
 	defer func() { _ = response.Body.Close() }()
 
 	if response.StatusCode != http.StatusOK {
-		return fmt.Errorf("Heartbeat request failed with status: %w", api.StatusErrorf(response.StatusCode, response.Status))
+		return fmt.Errorf("Heartbeat request failed with status: %w", api.StatusErrorf(response.StatusCode, "%v", response.Status))
 	}
 
 	return nil
diff --git a/internal/server/cluster/membership.go b/internal/server/cluster/membership.go
index 9fc9bf1e7..d55c6b2d9 100644
--- a/internal/server/cluster/membership.go
+++ b/internal/server/cluster/membership.go
@@ -1203,7 +1203,7 @@ func membershipCheckClusterStateForLeave(ctx context.Context, tx *db.ClusterTx,
 	}
 
 	if message != "" {
-		return fmt.Errorf(message)
+		return fmt.Errorf("%s", message)
 	}
 
 	// Check that it's not the last member.
diff --git a/internal/server/db/db.go b/internal/server/db/db.go
index c03006313..f14347692 100644
--- a/internal/server/db/db.go
+++ b/internal/server/db/db.go
@@ -405,7 +405,7 @@ func begin(db *sql.DB) (*sql.Tx, error) {
 	}
 
 	logger.Debugf("DbBegin: DB still locked")
-	logger.Debugf(logger.GetStack())
+	logger.Debugf("%s", logger.GetStack())
 	return nil, fmt.Errorf("DB is locked")
 }
 
diff --git a/internal/server/instance/drivers/qmp/commands.go b/internal/server/instance/drivers/qmp/commands.go
index 7b8d3bbf2..877fe10be 100644
--- a/internal/server/instance/drivers/qmp/commands.go
+++ b/internal/server/instance/drivers/qmp/commands.go
@@ -696,7 +696,7 @@ func (m *Monitor) RemoveBlockDevice(blockDevName string) error {
 		err := m.Run("blockdev-del", blockDevName, nil)
 		if err != nil {
 			if strings.Contains(err.Error(), "is in use") {
-				return api.StatusErrorf(http.StatusLocked, err.Error())
+				return api.StatusErrorf(http.StatusLocked, "%v", err.Error())
 			}
 
 			if strings.Contains(err.Error(), "Failed to find") {
diff --git a/internal/server/migration/migration_volumes.go b/internal/server/migration/migration_volumes.go
index b4c3f89f5..f2fc18ad2 100644
--- a/internal/server/migration/migration_volumes.go
+++ b/internal/server/migration/migration_volumes.go
@@ -32,7 +32,7 @@ type InfoResponse struct {
 // Err returns the error of the response.
 func (r *InfoResponse) Err() error {
 	if r.StatusCode != http.StatusOK {
-		return api.StatusErrorf(r.StatusCode, r.Error)
+		return api.StatusErrorf(r.StatusCode, "%v", r.Error)
 	}
 
 	return nil
diff --git a/internal/server/project/permissions.go b/internal/server/project/permissions.go
index 7e963017a..239ca777b 100644
--- a/internal/server/project/permissions.go
+++ b/internal/server/project/permissions.go
@@ -1688,7 +1688,7 @@ func CheckTargetMember(p *api.Project, targetMemberName string, allMembers []db.
 			// If restricted groups are specified then check member is in at least one of them.
 			err := AllowClusterMember(p, &potentialMember)
 			if err != nil {
-				return nil, api.StatusErrorf(http.StatusForbidden, err.Error())
+				return nil, api.StatusErrorf(http.StatusForbidden, "%v", err.Error())
 			}
 
 			return &potentialMember, nil
@@ -1703,7 +1703,7 @@ func CheckTargetGroup(ctx context.Context, tx *db.ClusterTx, p *api.Project, gro
 	// If restricted groups are specified then check the requested group is in the list.
 	err := AllowClusterGroup(p, groupName)
 	if err != nil {
-		return api.StatusErrorf(http.StatusForbidden, err.Error())
+		return api.StatusErrorf(http.StatusForbidden, "%v", err.Error())
 	}
 
 	// Check if the target group exists.
