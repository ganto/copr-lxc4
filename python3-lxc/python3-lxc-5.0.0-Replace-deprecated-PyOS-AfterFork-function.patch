From 5c603a76658d7d278086682ad4481d4c792224f4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andreas=20V=C3=B6gele?= <andreas@andreasvoegele.com>
Date: Tue, 13 May 2025 12:07:36 +0200
Subject: [PATCH] Replace the deprecated PyOS_AfterFork() function
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Container_attach_and_possibly_wait() fails in Python 3.13 with
"PyMutex_Unlock: unlocking mutex that is not locked" if PyOS_AfterFork()
is used.

Signed-off-by: Andreas VÃ¶gele <andreas@andreasvoegele.com>
---
 lxc.c | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/lxc.c b/lxc.c
index b515acd..3039cfc 100644
--- a/lxc.c
+++ b/lxc.c
@@ -198,7 +198,11 @@ static int lxc_attach_python_exec(void* _payload)
      * container. As lxc_attach() calls fork() PyOS_AfterFork should be called
      * in the new process if the Python interpreter will continue to be used.
      */
+#if PY_VERSION_HEX >= 0x030700F0
+    PyOS_AfterFork_Child();
+#else
     PyOS_AfterFork();
+#endif
 
     struct lxc_attach_python_payload *payload =
         (struct lxc_attach_python_payload *)_payload;
@@ -748,8 +752,14 @@ Container_attach_and_possibly_wait(Container *self, PyObject *args,
     if (!options)
         return NULL;
 
+#if PY_VERSION_HEX >= 0x030700F0
+    PyOS_BeforeFork();
+#endif
     ret = self->container->attach(self->container, lxc_attach_python_exec,
                                   &payload, options, &pid);
+#if PY_VERSION_HEX >= 0x030700F0
+    PyOS_AfterFork_Parent();
+#endif
     if (ret < 0)
         goto out;
 
